import{_ as n,c as s,o as a,a as t}from"./app.378e6094.js";const g='{"title":"Component Registration","description":"","frontmatter":{},"headers":[{"level":2,"title":"define","slug":"define"},{"level":2,"title":"defineAll","slug":"defineall"}],"relativePath":"guide/minze-component-registration.md","lastUpdated":1644425477934}',e={},p=t(`<h1 id="component-registration" tabindex="-1">Component Registration <a class="header-anchor" href="#component-registration" aria-hidden="true">#</a></h1><p>You can register components in two different ways: one by one or all at once.</p><h2 id="define" tabindex="-1">define <a class="header-anchor" href="#define" aria-hidden="true">#</a></h2><p>Define a single component by providing a name and a component class.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Alternatively, you can define components by calling their respective <code>define</code> method. See the <a href="/api/#define-1">API Reference</a> for more information.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Custom component names should always consist of at least two words.</p></div><div class="language-js"><pre><code><span class="token keyword">import</span> Minze<span class="token punctuation">,</span> <span class="token punctuation">{</span> MinzeElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;minze&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">MyElement</span> <span class="token keyword">extends</span> <span class="token class-name">MinzeElement</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">html</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;my element&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

Minze<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;my-element&#39;</span><span class="token punctuation">,</span> MyElement<span class="token punctuation">)</span>
</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-element</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-element</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="defineall" tabindex="-1">defineAll <a class="header-anchor" href="#defineall" aria-hidden="true">#</a></h2><p>Define multiple components at once. They will be automatically defined in <code>dash-case</code> format.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Your component class names have to be either in PascalCase or camelCase when using this registration method.</p></div><div class="language-js"><pre><code><span class="token keyword">import</span> Minze<span class="token punctuation">,</span> <span class="token punctuation">{</span> MinzeElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;minze&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">MyFirstElement</span> <span class="token keyword">extends</span> <span class="token class-name">MinzeElement</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">html</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;my first element&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MySecondElement</span> <span class="token keyword">extends</span> <span class="token class-name">MinzeElement</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">html</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;my second element&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

Minze<span class="token punctuation">.</span><span class="token function">defineAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>MyFirstElement<span class="token punctuation">,</span> MySecondElement<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-first-element</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-first-element</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-second-element</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-second-element</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>Modules</strong></p><p>If you are using modules you can register all exported components at once:</p><div class="language-js"><pre><code><span class="token comment">// elements.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MinzeElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;minze&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyFirstElement</span> <span class="token keyword">extends</span> <span class="token class-name">MinzeElement</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MySecondElement</span> <span class="token keyword">extends</span> <span class="token class-name">MinzeElement</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Elements <span class="token keyword">from</span> <span class="token string">&#39;./elements&#39;</span>

Minze<span class="token punctuation">.</span><span class="token function">defineAll</span><span class="token punctuation">(</span>Elements<span class="token punctuation">)</span>
</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-first-element</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-first-element</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-second-element</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-second-element</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,18),o=[p];function c(l,i,u,k,r,d){return a(),s("div",null,o)}var f=n(e,[["render",c]]);export{g as __pageData,f as default};
