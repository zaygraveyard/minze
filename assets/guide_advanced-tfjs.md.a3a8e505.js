import{_ as n,c as s,o as a,a as t}from"./app.378e6094.js";const g='{"title":"TensorFlow.js","description":"","frontmatter":{},"headers":[{"level":2,"title":"Development","slug":"development"},{"level":2,"title":"Production","slug":"production"},{"level":2,"title":"Using","slug":"using"},{"level":3,"title":"npm","slug":"npm"},{"level":3,"title":"CDN","slug":"cdn"}],"relativePath":"guide/advanced-tfjs.md","lastUpdated":1644425477934}',p={},o=t(`<h1 id="tensorflow-js" tabindex="-1">TensorFlow.js <a class="header-anchor" href="#tensorflow-js" aria-hidden="true">#</a></h1><p><a href="https://www.tensorflow.org/js" target="_blank" rel="noopener noreferrer">Tensorflow.js</a> is a library for machine learning in JavaScript. With Minze and Tensorflow.js you can use ML directly in your web components.</p><blockquote><p>The following guide is based on a fresh Minze CLI installation.</p></blockquote><h2 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-hidden="true">#</a></h2><ol><li>Install <code>@tensorflow/tfjs</code>.</li></ol><div class="language-bash"><pre><code>$ <span class="token function">npm</span> i @tensorflow/tfjs
</code></pre></div><ol start="2"><li>Navigate to the <code>lib</code> directory and create a new file.</li></ol><div class="language-"><pre><code>src/
\u2514\u2500 lib/
   \u251C\u2500 ...
   \u2514\u2500 my-element.js
</code></pre></div><ol start="3"><li>Paste the following code into the file.</li></ol><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> tf <span class="token keyword">from</span> <span class="token string">&#39;@tensorflow/tfjs&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MinzeElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;minze&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyElement</span> <span class="token keyword">extends</span> <span class="token class-name">MinzeElement</span> <span class="token punctuation">{</span>
  reactive <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

  <span class="token function-variable function">html</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&lt;div&gt;loading...&lt;/div&gt;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
  </span><span class="token template-punctuation string">\`</span></span>

  <span class="token keyword">async</span> <span class="token function">onReactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// simple linear regression (y = x * 2)</span>

    <span class="token comment">// features and labels</span>
    <span class="token keyword">const</span> x <span class="token operator">=</span> tf<span class="token punctuation">.</span><span class="token function">tidy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> tf<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reshape</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

    <span class="token comment">// create the model</span>
    <span class="token keyword">const</span> model <span class="token operator">=</span> tf<span class="token punctuation">.</span><span class="token function">sequential</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    model<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>layers<span class="token punctuation">.</span><span class="token function">dense</span><span class="token punctuation">(</span><span class="token punctuation">{</span> units<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> inputShape<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// compile the model</span>
    model<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      loss<span class="token operator">:</span> <span class="token string">&#39;meanSquaredError&#39;</span><span class="token punctuation">,</span>
      optimizer<span class="token operator">:</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span><span class="token function">sgd</span><span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// train the model</span>
    <span class="token keyword">await</span> model<span class="token punctuation">.</span><span class="token function">fit</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">{</span> epochs<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// make prediction (the result should be around 400)</span>
    <span class="token keyword">const</span> xPred <span class="token operator">=</span> tf<span class="token punctuation">.</span><span class="token function">tensor</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> yPred <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">predict</span><span class="token punctuation">(</span>xPred<span class="token punctuation">)</span>

    <span class="token comment">// assign to reactive property</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> yPred<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token comment">// clean up</span>
    tf<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> xPred<span class="token punctuation">,</span> yPred<span class="token punctuation">]</span><span class="token punctuation">)</span>
    tf<span class="token punctuation">.</span><span class="token function">disposeVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ol start="4"><li>Open the <code>module.js</code> and <code>template.js</code> files.</li></ol><div class="language-"><pre><code>src/
\u251C\u2500 ...
\u251C\u2500 module.js
\u2514\u2500 template.js
</code></pre></div><ol start="5"><li>Define an export for your component at the bottom of <code>module.js</code>.</li></ol><div class="language-js"><pre><code><span class="token comment">// ...</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./lib/my-element&#39;</span>
</code></pre></div><ol start="5"><li>Add your component to the template inside <code>template.js</code>.</li></ol><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  &lt;my-element&gt;&lt;/my-element&gt;
  &lt;minze-counter&gt;&lt;/minze-counter&gt;
</span><span class="token template-punctuation string">\`</span></span>
</code></pre></div><ol start="6"><li>Run the npm <code>dev</code> script, and navigate to <code>http://localhost:3000</code>.</li></ol><div class="language-bash"><pre><code>$ <span class="token function">npm</span> run dev
</code></pre></div><ol start="7"><li>Your component should be displayed in the browser. After a short while, the prediction will be shown.</li></ol><h2 id="production" tabindex="-1">Production <a class="header-anchor" href="#production" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The TensorFlow.js library is quite big in size and shouldn&#39;t be included in the production build of your components, but loaded separately.</p></div><p>For production, you need to adjust the <code>rollup.config.js</code> file, so that <code>@tensorflow/tfjs</code> package is not included in the output bundle. Additionally, you need to define a global for the CDN build.</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br><br><br></div><pre><code><span class="token comment">// rollup.config.js</span>

<span class="token comment">// ...</span>
<span class="token keyword">const</span> <span class="token function-variable function">createConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> format<span class="token punctuation">,</span> file <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    external<span class="token operator">:</span> <span class="token punctuation">[</span>
      format <span class="token operator">!==</span> <span class="token string">&#39;umd&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^minze</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@tensorflow</span><span class="token regex-delimiter">/</span></span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    output<span class="token operator">:</span> <span class="token punctuation">{</span>
      dir<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      format<span class="token operator">:</span> format<span class="token punctuation">,</span>
      globals<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;@tensorflow/tfjs&#39;</span><span class="token operator">:</span> <span class="token string">&#39;tf&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// ...</span>
</code></pre></div><h2 id="using" tabindex="-1">Using <a class="header-anchor" href="#using" aria-hidden="true">#</a></h2><blockquote><p>Let&#39;s assume you published your library under the name <code>my-awesome-package</code></p></blockquote><h3 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-hidden="true">#</a></h3><div class="language-bash"><pre><code>$ <span class="token function">npm</span> <span class="token function">install</span> minze @tensorflow/tfjs my-awesome-package
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">import</span> Minze <span class="token keyword">from</span> <span class="token string">&#39;minze&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MyElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;my-awesome-package&#39;</span>

Minze<span class="token punctuation">.</span><span class="token function">defineAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>MyElement<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-element</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-element</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="cdn" tabindex="-1">CDN <a class="header-anchor" href="#cdn" aria-hidden="true">#</a></h3><p>If you have published your package to npm, you can also load it via a CDN link from <code>unpkg</code> or <code>jsdelivr</code>.</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-element</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-element</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//unpkg.com/my-awesome-package@latest<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//unpkg.com/@tensorflow/tfjs@latest<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,32),e=[o];function c(l,u,i,r,k,d){return a(),s("div",null,e)}var f=n(p,[["render",c]]);export{g as __pageData,f as default};
