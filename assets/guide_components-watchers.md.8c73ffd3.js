import{_ as n,c as a,o as s,a as t}from"./app.378e6094.js";const m='{"title":"Watchers","description":"","frontmatter":{},"headers":[],"relativePath":"guide/components-watchers.md","lastUpdated":1644425477934}',e={},p=t(`<h1 id="watchers" tabindex="-1">Watchers <a class="header-anchor" href="#watchers" aria-hidden="true">#</a></h1><p><code>watch</code> watches the given reactive properties and calls the provided callback whenever a change is detected. <code>wacth</code> should be an array containing one or more tuples. In JavaScript, tuples are ordinary arrays, but in TypeScript they are their own type, defining the length of the array and the types of its elements.</p><p>Every tuple takes exactly 2 values.</p><p>Tuple structure: [<code>name</code>, <code>callback</code>]</p><ol><li><strong>name:</strong> the reactive property name to watch. Has to be <code>camelCase</code>, can be optionally <code>dash-case</code> for reactive attributes declared in <code>attrs</code>.</li><li><strong>callback:</strong> a callback function that runs whenever one of the property&#39;s values changes. Can be asynchronous.</li></ol><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>watch</code> only works with reactive properties that where defined with <code>reactive</code> or <code>attrs</code>.</p></div><p><strong>Example</strong></p><div class="language-js"><pre><code><span class="token keyword">import</span> Minze<span class="token punctuation">,</span> <span class="token punctuation">{</span> MinzeElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;minze&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">MyElement</span> <span class="token keyword">extends</span> <span class="token class-name">MinzeElement</span> <span class="token punctuation">{</span>
  reactive <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

  <span class="token function-variable function">watchCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> key<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> key<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token comment">// 1, 0, count, this</span>
  <span class="token punctuation">}</span>

  watch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>watchCount<span class="token punctuation">]</span><span class="token punctuation">]</span>

  <span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Minze<span class="token punctuation">.</span><span class="token function">defineAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>MyElement<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-element</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-element</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,9),o=[p];function c(l,u,i,r,k,d){return s(),a("div",null,o)}var g=n(e,[["render",c]]);export{m as __pageData,g as default};
