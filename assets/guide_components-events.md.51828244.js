import{_ as n,c as s,o as a,a as t}from"./app.378e6094.js";const h='{"title":"Events","description":"","frontmatter":{},"headers":[{"level":2,"title":"Event Listeners","slug":"event-listeners"},{"level":2,"title":"Casting","slug":"casting"}],"relativePath":"guide/components-events.md","lastUpdated":1644425477934}',e={},o=t(`<h1 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-hidden="true">#</a></h1><p>Events can be used to communicate between components and the outside world.</p><h2 id="event-listeners" tabindex="-1">Event Listeners <a class="header-anchor" href="#event-listeners" aria-hidden="true">#</a></h2><p>An event Listener can listen for specific events and run a callback function whenever the event is triggered. In a MinzeElement, you can add event listeners in bulk by specifying an array of tuples for the <code>eventListeners</code> property. In JavaScript, tuples are ordinary arrays, but in TypeScript they are their own type, defining the length of the array and the types of its elements.</p><p>Every eventListeners tuple takes exactly 3 values.</p><p>Tuple structure: [<code>eventTarget</code>, <code>eventName</code>, <code>callback</code>]</p><ol><li><strong>eventTarget:</strong> where the event listener should be attached to. Can be a valid CSS selector (for elements inside the <code>html</code> property), <code>this</code> (The component itself) or <code>window</code>.</li><li><strong>eventName:</strong> the name of the event to listen to.</li><li><strong>callback:</strong> a callback function that runs when the eventName is matched.</li></ol><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Web components are meant to be encapsulated HTML elements, it&#39;s a bad idea to create event listeners inside the component and attach them all over the place. That&#39;s why the targets outside of the component are intentionally limited to the <code>window</code> object, to prevent <code>event-listener-pollution</code>.</p></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>When passing a method as a callback, make sure it&#39;s either defined as an arrow function or properly bound to the component.</p></div><p><strong>Example</strong></p><div class="language-js"><pre><code><span class="token keyword">import</span> Minze<span class="token punctuation">,</span> <span class="token punctuation">{</span> MinzeElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;minze&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">MyElement</span> <span class="token keyword">extends</span> <span class="token class-name">MinzeElement</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">html</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;button class=&quot;button&quot;&gt;
      Button
    &lt;/button&gt;
  </span><span class="token template-punctuation string">\`</span></span>

  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  eventListeners <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&#39;.button&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">]</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

Minze<span class="token punctuation">.</span><span class="token function">defineAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>MyElement<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-element</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-element</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="casting" tabindex="-1">Casting <a class="header-anchor" href="#casting" aria-hidden="true">#</a></h2><p>Casting (shorthand for <code>Broadcasting</code>) is the process of dispatching a custom event from a component and broadcasting it through the document up the component tree. This event can be either listened to by other components or the outside world.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It&#39;s a good idea to prefix your custom event names to avoid collisions with other libraries.</p></div><p><strong>Example</strong></p><div class="language-js"><pre><code><span class="token keyword">import</span> Minze<span class="token punctuation">,</span> <span class="token punctuation">{</span> MinzeElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;minze&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyElement</span> <span class="token keyword">extends</span> <span class="token class-name">MinzeElement</span> <span class="token punctuation">{</span>
  <span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> optionalDetail <span class="token operator">=</span> <span class="token punctuation">{</span> msg<span class="token operator">:</span> <span class="token string">&#39;Hello Minze!&#39;</span> <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span><span class="token string">&#39;minze:ready&#39;</span><span class="token punctuation">,</span> optionalDetail<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Minze<span class="token punctuation">.</span><span class="token function">defineAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>MyElement<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-element</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-element</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,18),p=[o];function c(l,i,u,r,k,d){return a(),s("div",null,p)}var g=n(e,[["render",c]]);export{h as __pageData,g as default};
